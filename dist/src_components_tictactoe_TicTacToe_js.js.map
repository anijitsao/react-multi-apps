{"version":3,"file":"src_components_tictactoe_TicTacToe_js.js","mappings":"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","sources":["webpack://react-app-simple-calculator/./src/components/tictactoe/Box.js","webpack://react-app-simple-calculator/./src/components/tictactoe/TicTacToe.js"],"sourcesContent":["// Box component\n\nconst Box = (props) => {\n  // extracting necessary fields from the props\n  const { value, rowIndex, colIndex, handleOnClick } = props;\n  const boxIndex = rowIndex + colIndex + 1;\n  const boxStyle = boxIndex % 2 === 0 ? \"even-box box\" : \"odd-box box\";\n\n  return (\n    <div\n      id={`${rowIndex}-${colIndex}`}\n      className={boxStyle}\n      onClick={handleOnClick}\n    >\n      {value == 1 ? \"X\" : value == 2 ? \"O\" : \"\"}\n    </div>\n  );\n};\n\nexport default Box;\n","import { useState, useEffect } from \"react\";\nimport Box from \"./Box\";\n// import useEthConnector from \"./EthConnector\";\n\nimport Constants from \"../Constants\";\n\nconst TicTacToe = (props) => {\n  const [box, setBox] = useState();\n  //   const [boxEth, getBox, saveBox, resultEth, getResult, saveResult] =\n  //     useEthConnector();\n  const [userTurn, setUserTurn] = useState(true);\n  const [isBoxFilled, setIsBoxFilled] = useState(false);\n  const [result, setResult] = useState(\"\");\n  const [isBoxLoaded, setBoxLoaded] = useState(false);\n\n  useEffect(() => {\n    if (!isBoxLoaded) {\n      //   getBox();\n      //   getResult();\n      setBoxLoaded(true);\n    }\n    // copy the Ethereum box into our box variable\n    if (boxEth && !box) {\n      setBox(boxEth);\n    }\n\n    // copy the Game result to result variable\n    // if (resultEth && !result) {\n    //   console.log(\"Game result as received\", resultEth);\n    //   setResult(resultEth);\n    // }\n\n    if (Array.isArray(box) && !userTurn) {\n      checkForMatch();\n      computerPlays();\n    }\n  });\n\n  // initialize all the constants\n  const allConstants = Constants();\n  const GRID_LENGTH = allConstants.GRID_LENGTH;\n\n  // handle the onClick event\n  const handleOnClick = (event) => {\n    const { id } = event.target;\n    console.log(\"code comes here\", id);\n    if (!isBoxFilled) {\n      const [rowIndex, colIndex] = generateIndices(id);\n      let isEmpty = checkIfEmptyCell(rowIndex, colIndex);\n      if (isEmpty === true) {\n        captureUserMove(rowIndex, colIndex);\n      }\n    } else {\n      showResult();\n    }\n  };\n\n  // generate row and col index\n  const generateIndices = (id) => {\n    let [rowIndex, colIndex] = id.split(\"-\");\n    rowIndex = parseInt(rowIndex);\n    colIndex = parseInt(colIndex);\n    return [rowIndex, colIndex];\n  };\n\n  // check if it is an empty slot\n  const checkIfEmptyCell = (rowIndex, colIndex) => {\n    if (box[rowIndex][colIndex] == 0) {\n      return true;\n    }\n    return false;\n  };\n\n  // capture user's move by set it to 1\n  const captureUserMove = (rowIndex, colIndex) => {\n    console.log(\"Code for user move\");\n    const boxNew = JSON.parse(JSON.stringify(box));\n    boxNew[rowIndex][colIndex] = allConstants.USER_MOVE;\n    saveBox(rowIndex, colIndex, allConstants.USER_MOVE);\n    setBox(boxNew);\n    setUserTurn(false);\n  };\n\n  // check all the cells are filled or not\n  const checkIfBoxFilled = () => {\n    for (let row = 0; row < allConstants.GRID_LENGTH; row++) {\n      for (let col = 0; col < allConstants.GRID_LENGTH; col++) {\n        if (checkIfEmptyCell(row, col)) {\n          setIsBoxFilled(true);\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // check if a match found\n  const checkForMatch = () => {\n    // for a Horizontal match\n    for (let i = 0; i < GRID_LENGTH; i++) {\n      let rowStr = box[i].join(\"\");\n      checkWinner(rowStr);\n    }\n\n    // for a vertical match\n    const boxTranspose = box[0].map((col, i) => box.map((row) => row[i]));\n    for (let i = 0; i < GRID_LENGTH; i++) {\n      let colStr = boxTranspose[i].join(\"\");\n      checkWinner(colStr);\n    }\n\n    // for a diagonal match\n    let principalDiagonal = \"\";\n    let otherDiagonal = \"\";\n\n    for (let i = 0; i < GRID_LENGTH; i++) {\n      for (let j = 0; j < GRID_LENGTH; j++) {\n        if (i == j) {\n          principalDiagonal = `${principalDiagonal}${box[i][j]}`;\n        }\n\n        if (i + j + 1 == GRID_LENGTH) {\n          otherDiagonal = `${otherDiagonal}${box[i][j]}`;\n        }\n      }\n    }\n\n    checkWinner(principalDiagonal);\n    checkWinner(otherDiagonal);\n  };\n\n  // function to check who is the winner\n  const checkWinner = (str) => {\n    const allEqual = str.split(\"\").every((char) => {\n      return char != allConstants.EMPTY_CELL && char == str[0];\n    });\n    if (str && allEqual) {\n      const winner =\n        str[0] == allConstants.USER_MOVE\n          ? allConstants.USER_MOVE\n          : allConstants.COMPUTER_MOVE;\n      showResult(winner);\n    }\n  };\n\n  // function to capture how Computer gives the moves\n  const computerPlays = () => {\n    while (true && !userTurn) {\n      // generate Random column and row number\n      let randomCol = Math.floor(Math.random() * GRID_LENGTH) + 0;\n      let randomRow = Math.floor(Math.random() * GRID_LENGTH) + 0;\n      console.log(\"random cell generated\", randomCol, \" \", randomRow);\n\n      if (checkIfEmptyCell(randomRow, randomCol)) {\n        const boxNew = JSON.parse(JSON.stringify(box));\n        boxNew[randomRow][randomCol] = allConstants.COMPUTER_MOVE;\n        saveBox(randomRow, randomCol, allConstants.COMPUTER_MOVE);\n        setBox(boxNew);\n        setUserTurn(true);\n        return;\n      }\n    }\n  };\n\n  // show the result\n  const showResult = (winner) => {\n    let content = !winner\n      ? \"GAME TIED\"\n      : winner == allConstants.USER_MOVE\n      ? \"You won\"\n      : \"Computer won\";\n    console.log(\"RESULT of the game is\", result);\n    setIsBoxFilled(true);\n\n    // if result not defined set it\n    result == \"TBD\" ? setResult(content) : result;\n    saveResult(content);\n  };\n\n  // render the box contents\n  return (\n    <div className=\"box-container\">\n      {result && result != \"TBD\" ? (\n        <div className=\"result--div\">{`${result}!!!`}</div>\n      ) : Array.isArray(box) ? (\n        box.map((row, rowIndex) => {\n          return (\n            <div className=\"row-container\" key={rowIndex}>\n              {row.map((box, colIndex) => {\n                return (\n                  <Box\n                    value={box}\n                    rowIndex={rowIndex}\n                    colIndex={colIndex}\n                    handleOnClick={handleOnClick}\n                    key={colIndex}\n                  />\n                );\n              })}\n            </div>\n          );\n        })\n      ) : (\n        \"box is loading...\"\n      )}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n"],"names":["Box","props","value","rowIndex","colIndex","handleOnClick","boxIndex","boxStyle","useState","useEffect","Constants","TicTacToe","box","setBox","userTurn","setUserTurn","isBoxFilled","setIsBoxFilled","result","setResult","isBoxLoaded","setBoxLoaded","boxEth","Array","isArray","checkForMatch","computerPlays","allConstants","GRID_LENGTH","event","id","target","console","log","generateIndices","isEmpty","checkIfEmptyCell","captureUserMove","showResult","split","parseInt","boxNew","JSON","parse","stringify","USER_MOVE","saveBox","checkIfBoxFilled","row","col","i","rowStr","join","checkWinner","boxTranspose","map","colStr","principalDiagonal","otherDiagonal","j","str","allEqual","every","char","EMPTY_CELL","winner","COMPUTER_MOVE","randomCol","Math","floor","random","randomRow","content","saveResult"],"sourceRoot":""}