{"version":3,"file":"579.js","mappings":"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","sources":["webpack://react-app-simple-calculator/./src/components/tictactoe/Box.js","webpack://react-app-simple-calculator/./src/components/tictactoe/TicTacToeHelpers.js","webpack://react-app-simple-calculator/./src/css/tictactoe.css?a773","webpack://react-app-simple-calculator/./src/components/tictactoe/TicTacToe.js","webpack://react-app-simple-calculator/./src/css/tictactoe.css"],"sourcesContent":["// Box component\nimport { Constants } from \"../Constants\";\n\nconst Box = (props) => {\n  // extracting necessary fields from the props\n  const { value, rowIndex, colIndex, onClickHandler } = props;\n  const boxIndex = rowIndex + colIndex + 1;\n  const boxStyle = boxIndex % 2 === 0 ? \"even-box box\" : \"odd-box box\";\n\n  // initialize all the constants\n  const allConstants = Constants();\n\n  return (\n    <div\n      id={`${rowIndex}-${colIndex}`}\n      className={boxStyle}\n      onClick={onClickHandler}\n    >\n      {value == allConstants.USER_MOVE\n        ? \"X\"\n        : value == allConstants.COMPUTER_MOVE\n        ? \"O\"\n        : \"\"}\n    </div>\n  );\n};\n\nexport default Box;\n","import { Constants } from \"../Constants\";\n\n// initialize all the constants\nconst allConstants = Constants();\n\n// generate row and col index\nconst generateIndices = (id) => {\n  let [rowIndex, colIndex] = id.split(\"-\");\n  rowIndex = parseInt(rowIndex);\n  colIndex = parseInt(colIndex);\n  return [rowIndex, colIndex];\n};\n\n// check if it is an empty slot\nconst checkIfEmptyCell = (rowIndex, colIndex, box) => {\n  return box[rowIndex][colIndex] == allConstants.EMPTY_CELL;\n};\n\nconst findDiagonals = (box) => {\n  let principalDiagonal = \"\";\n  let otherDiagonal = \"\";\n  const GRID_LENGTH = allConstants.GRID_LENGTH;\n\n  for (let i = 0; i < GRID_LENGTH; i++) {\n    for (let j = 0; j < GRID_LENGTH; j++) {\n      if (i == j) {\n        principalDiagonal = `${principalDiagonal}${box[i][j]}`;\n      }\n\n      if (i + j + 1 == GRID_LENGTH) {\n        otherDiagonal = `${otherDiagonal}${box[i][j]}`;\n      }\n    }\n  }\n\n  return [principalDiagonal, otherDiagonal];\n};\n\nexport { generateIndices, checkIfEmptyCell, findDiagonals };\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./tictactoe.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./tictactoe.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { useState, useEffect } from \"react\";\nimport Box from \"./Box\";\nimport { Constants } from \"../Constants\";\nimport {\n  generateIndices,\n  checkIfEmptyCell,\n  findDiagonals,\n} from \"./TicTacToeHelpers\";\n\n// css\nimport \"../../css/tictactoe.css\";\n\nconst TicTacToe = (props) => {\n  // initialize all the constants\n  const allConstants = Constants();\n\n  const [box, setBox] = useState(allConstants.BOX_INITIAL);\n  const [userTurn, setUserTurn] = useState(true);\n  const [isBoxFilled, setIsBoxFilled] = useState(false);\n  const [result, setResult] = useState(\"TBD\");\n\n  useEffect(() => {\n    if (Array.isArray(box) && !userTurn) {\n      checkForMatch();\n      computerPlays();\n    }\n  });\n\n  const GRID_LENGTH = allConstants.GRID_LENGTH;\n\n  // handle the onClick event\n  const onClickHandler = (event) => {\n    const { id } = event.target;\n    console.log(\"code comes here\", id);\n    if (!isBoxFilled) {\n      const [rowIndex, colIndex] = generateIndices(id);\n      let isEmpty = checkIfEmptyCell(rowIndex, colIndex, box);\n      if (isEmpty === true) {\n        captureUserMove(rowIndex, colIndex);\n      }\n    } else {\n      showResult();\n    }\n  };\n\n  // capture user's move by set it to 1\n  const captureUserMove = (rowIndex, colIndex) => {\n    console.log(\"Code for user move\");\n    const boxNew = JSON.parse(JSON.stringify(box));\n    boxNew[rowIndex][colIndex] = allConstants.USER_MOVE;\n    setBox(boxNew);\n    setUserTurn(false);\n  };\n\n  // check all the cells are filled or not\n  const checkIfBoxFilled = () => {\n    for (let row = 0; row < allConstants.GRID_LENGTH; row++) {\n      for (let col = 0; col < allConstants.GRID_LENGTH; col++) {\n        if (checkIfEmptyCell(row, col, box)) {\n          setIsBoxFilled(true);\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // check if a match found\n  const checkForMatch = () => {\n    // for a Horizontal match\n    for (let i = 0; i < GRID_LENGTH; i++) {\n      let rowStr = box[i].join(\"\");\n      checkWinner(rowStr);\n    }\n\n    // for a vertical match\n    const boxTranspose = box[0].map((col, i) => box.map((row) => row[i]));\n    for (let i = 0; i < GRID_LENGTH; i++) {\n      let colStr = boxTranspose[i].join(\"\");\n      checkWinner(colStr);\n    }\n\n    // for a diagonal match\n    let [principalDiagonal, otherDiagonal] = findDiagonals(box);\n\n    checkWinner(principalDiagonal);\n    checkWinner(otherDiagonal);\n  };\n\n  // function to check who is the winner\n  const checkWinner = (str) => {\n    const allEqual = str.split(\"\").every((char) => {\n      return char != allConstants.EMPTY_CELL && char == str[0];\n    });\n    if (str && allEqual) {\n      const winner =\n        str[0] == allConstants.USER_MOVE\n          ? allConstants.USER_MOVE\n          : allConstants.COMPUTER_MOVE;\n      showResult(winner);\n    }\n  };\n\n  // function to capture how Computer gives the moves\n  const computerPlays = () => {\n    while (true && !userTurn) {\n      // generate Random column and row number\n      let randomCol = Math.floor(Math.random() * GRID_LENGTH) + 0;\n      let randomRow = Math.floor(Math.random() * GRID_LENGTH) + 0;\n      console.log(\"random cell generated\", randomCol, \" \", randomRow);\n\n      if (checkIfEmptyCell(randomRow, randomCol, box)) {\n        const boxNew = JSON.parse(JSON.stringify(box));\n        boxNew[randomRow][randomCol] = allConstants.COMPUTER_MOVE;\n        setBox(boxNew);\n        setUserTurn(true);\n        return;\n      }\n    }\n  };\n\n  // show the result\n  const showResult = (winner) => {\n    let content = !winner\n      ? \"GAME TIED\"\n      : winner == allConstants.USER_MOVE\n      ? \"You won\"\n      : \"Computer won\";\n    console.log(\"RESULT of the game is\", result);\n    setIsBoxFilled(true);\n\n    // if result not defined set it\n    result == \"TBD\" ? setResult(content) : result;\n  };\n\n  // render the box contents\n  return (\n    <div className=\"box-container\">\n      {result && result != \"TBD\" ? (\n        <div className=\"result--div\">{`${result}!!!`}</div>\n      ) : (\n        Array.isArray(box) &&\n        box.map((row, rowIndex) => {\n          return (\n            <div className=\"row-container\" key={rowIndex}>\n              {row.map((box, colIndex) => {\n                return (\n                  <Box\n                    value={box}\n                    rowIndex={rowIndex}\n                    colIndex={colIndex}\n                    onClickHandler={onClickHandler}\n                    key={colIndex}\n                  />\n                );\n              })}\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/* Tic Tac Toe box related */\\n.box-container {\\n  background-color: var(--lighter-grey);\\n  padding: 1em;\\n\\n  display: grid;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.row-container {\\n  display: grid;\\n  grid-template-columns: repeat(3, 1fr);\\n  grid-gap: 7px 1px;\\n  text-align: center;\\n  width: 30vw;\\n}\\n\\n/* all the boxes of the tic tac toe */\\n.box {\\n  color: var(--lighter-grey);\\n  padding: 1.17em;\\n  font-weight: 700;\\n  font-size: 1.5rem;\\n  height: 6rem;\\n}\\n\\n.box:hover {\\n  opacity: 0.8;\\n  transition: var(--slow-transition);\\n  cursor: pointer;\\n}\\n\\n.even-box {\\n  background-color: var(--lighter-grey);\\n  color: var(--light-purple);\\n}\\n\\n.odd-box {\\n  background-color: var(--light-purple);\\n  color: var(--lighter-grey);\\n}\\n\\n.result--div {\\n  font-size: 1.5rem;\\n  font-weight: 100;\\n}\\n\\n/* media queries to make it responsive */\\n@media only screen and (max-width: 600px) {\\n  .row-container {\\n    width: 39vw;\\n  }\\n\\n  .box {\\n    padding: 2.1em;\\n    width: 3rem;\\n  }\\n\\n  .box-container {\\n    padding-left: 0;\\n    padding-right: 5rem;\\n  }\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/css/tictactoe.css\"],\"names\":[],\"mappings\":\"AAAA,4BAA4B;AAC5B;EACE,qCAAqC;EACrC,YAAY;;EAEZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,iBAAiB;EACjB,kBAAkB;EAClB,WAAW;AACb;;AAEA,qCAAqC;AACrC;EACE,0BAA0B;EAC1B,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,kCAAkC;EAClC,eAAe;AACjB;;AAEA;EACE,qCAAqC;EACrC,0BAA0B;AAC5B;;AAEA;EACE,qCAAqC;EACrC,0BAA0B;AAC5B;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA,wCAAwC;AACxC;EACE;IACE,WAAW;EACb;;EAEA;IACE,cAAc;IACd,WAAW;EACb;;EAEA;IACE,eAAe;IACf,mBAAmB;EACrB;AACF\",\"sourcesContent\":[\"/* Tic Tac Toe box related */\\n.box-container {\\n  background-color: var(--lighter-grey);\\n  padding: 1em;\\n\\n  display: grid;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.row-container {\\n  display: grid;\\n  grid-template-columns: repeat(3, 1fr);\\n  grid-gap: 7px 1px;\\n  text-align: center;\\n  width: 30vw;\\n}\\n\\n/* all the boxes of the tic tac toe */\\n.box {\\n  color: var(--lighter-grey);\\n  padding: 1.17em;\\n  font-weight: 700;\\n  font-size: 1.5rem;\\n  height: 6rem;\\n}\\n\\n.box:hover {\\n  opacity: 0.8;\\n  transition: var(--slow-transition);\\n  cursor: pointer;\\n}\\n\\n.even-box {\\n  background-color: var(--lighter-grey);\\n  color: var(--light-purple);\\n}\\n\\n.odd-box {\\n  background-color: var(--light-purple);\\n  color: var(--lighter-grey);\\n}\\n\\n.result--div {\\n  font-size: 1.5rem;\\n  font-weight: 100;\\n}\\n\\n/* media queries to make it responsive */\\n@media only screen and (max-width: 600px) {\\n  .row-container {\\n    width: 39vw;\\n  }\\n\\n  .box {\\n    padding: 2.1em;\\n    width: 3rem;\\n  }\\n\\n  .box-container {\\n    padding-left: 0;\\n    padding-right: 5rem;\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["props","value","rowIndex","colIndex","onClickHandler","boxStyle","allConstants","Constants","id","className","onClick","USER_MOVE","COMPUTER_MOVE","checkIfEmptyCell","box","EMPTY_CELL","findDiagonals","principalDiagonal","otherDiagonal","GRID_LENGTH","i","j","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","setBox","useState","BOX_INITIAL","userTurn","setUserTurn","isBoxFilled","setIsBoxFilled","result","setResult","useEffect","Array","isArray","checkForMatch","computerPlays","event","target","console","log","showResult","split","parseInt","generateIndices","captureUserMove","boxNew","JSON","parse","stringify","rowStr","join","checkWinner","boxTranspose","map","col","row","colStr","str","allEqual","every","char","winner","randomCol","Math","floor","random","randomRow","content","___CSS_LOADER_EXPORT___","push","module"],"sourceRoot":""}